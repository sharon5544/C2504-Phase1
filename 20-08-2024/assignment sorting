using System;

abstract class Employee
{
    public abstract decimal CalculateSalary();
    public abstract void PrintDetails();
public bool Gt( Employee other)
    {
        return this.CalculateSalary() > other.CalculateSalary();
    }
}

class FullTimeEmployee : Employee
{
    public decimal BaseSalary { get; set; }
    public decimal BonusPercentage { get; set; }

    public FullTimeEmployee(decimal baseSalary, decimal bonusPercentage)
    {
        BaseSalary = baseSalary;
        BonusPercentage = bonusPercentage;
    }

    public override decimal CalculateSalary()
    {
        return BaseSalary + (BaseSalary * BonusPercentage);
    }

    public override void PrintDetails()
    {
        Console.WriteLine($"Full-Time Employee | Salary: {CalculateSalary()}");
    }
}

class PartTimeEmployee : Employee
{
    public decimal HourlyRate { get; set; }
    public int HoursWorked { get; set; }

    public PartTimeEmployee(decimal hourlyRate, int hoursWorked)
    {
        HourlyRate = hourlyRate;
        HoursWorked = hoursWorked;
    }

    public override decimal CalculateSalary()
    {
        return HourlyRate * HoursWorked;
    }

    public override void PrintDetails()
    {
        Console.WriteLine($"Part-Time Employee | Salary: {CalculateSalary()}");
    }
}

class Program
{
    static void Main()
    {
        Console.Write("Enter the number of employees: ");
        int n = int.Parse(Console.ReadLine());

        Employee[] employees = new Employee[n];

        for (int i = 0; i < n; i++)
        {
            Console.WriteLine($"Enter details for Employee {i + 1}:");
            Console.Write("Is the employee Full-Time (yes/no)? ");
            string type = Console.ReadLine().ToLower();

            if (type == "yes")
            {
                Console.Write("Enter Base Salary: ");
                decimal baseSalary = decimal.Parse(Console.ReadLine());
                Console.Write("Enter Bonus Percentage: ");
                decimal bonusPercentage = decimal.Parse(Console.ReadLine());
                employees[i] = new FullTimeEmployee(baseSalary, bonusPercentage);
            }
            else if(type == "no")
            {
                Console.Write("Enter Hourly Rate: ");
                decimal hourlyRate = decimal.Parse(Console.ReadLine());
                Console.Write("Enter Hours Worked: ");
                int hoursWorked = int.Parse(Console.ReadLine());
                employees[i] = new PartTimeEmployee(hourlyRate, hoursWorked);
            }
            else
            {
                Console.WriteLine("Invalid input enter 'yes' or 'no'");
                return;
            }
        }

        Console.WriteLine("\nEmployees before Insertion sorting:");
        PrintEmployees(employees);

        InsertionSort(employees);

        Console.WriteLine("\nEmployees after Insertion sorting:");
        PrintEmployees(employees);
    }

    static void PrintEmployees(Employee[] employees)
    {
        foreach (Employee employee in employees)
        {
            employee.PrintDetails();
        }
    }

    static void InsertionSort(Employee[] ar)
    {
        int N = ar.Length;
        for (int unsortedIndex = 1; unsortedIndex < N; unsortedIndex++) //unsorted list, forward traversal 
        {
            Employee target = ar[unsortedIndex];
            int targetIndex = unsortedIndex; //init target index

            for (int sortedIndex = unsortedIndex - 1; sortedIndex >= 0; sortedIndex--) // sorted list, backward traversal 
            {
                //if no any greater element
                if (!(ar[sortedIndex].Gt(target)))
                {
                    break;
                }
                //if any greater element
                ar[sortedIndex + 1] = ar[sortedIndex];//'shift right' 
                targetIndex = sortedIndex; //change targetIndex 
            }

            if (targetIndex != unsortedIndex)
            {
                ar[targetIndex] = target;
            }
            //TRACE//Console.Write($"\nunsortedIndex={unsortedIndex},targetIndex={targetIndex}:"); print(ar);
        }

    }
}
